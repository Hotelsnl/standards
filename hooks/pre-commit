#!/bin/bash
# pre-commit git hook for CodeSniffer validation
# based on gist: https://gist.github.com/2295709

# The path of the phpcs (CodeSniffer) binary
CS_BIN=/usr/bin/phpcs

# the coding stardard or path to the coding standard
CS_CODING_STANDARD=Hotelsnl

# egrep compatible pattern of files that need to be checked
CS_FILE_PATTERN="\.(php|phtml)$"

# comma seperated list of file patterns that need to be ignored
CS_IGNORE=

# encoding
CS_ENCODING=utf-8

# should we ignore warnings
CS_IGNORE_WARNINGS=1

# location of tmp file where we put files for sniffing
TMP_STAGING=".tmp_staging"

# simple check if code sniffer is set up correctly
if [ ! -x $CS_BIN ]; then
  echo "CodeSniffer bin not found or isn't executable -> $CS_BIN"
  exit 1
fi

# stolen from template file
if git rev-parse --verify HEAD
then
  against=HEAD
else
  # Initial commit: diff against an empty tree object
  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# this is the magic:
# retrieve all files in staging area that are added, modified or renamed
# but no deletions etc
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

if [ "$FILES" == "" ]; then
  exit 0
fi

# create temporary copy of staging area
if [ -e $TMP_STAGING ]; then
  rm -rf $TMP_STAGING
fi

mkdir $TMP_STAGING

# match files against whitelist
FILES_TO_CHECK=""
for FILE in $FILES
do
  echo "$FILE" | egrep -q "$CS_FILE_PATTERN"
  RETVAL=$?

  if [ "$RETVAL" -eq "0" ]; then
    FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
  fi
done

if [ "$FILES_TO_CHECK" == "" ]; then
  exit 0
fi

# execute the code sniffer
if [ "$CS_IGNORE" != "" ]; then
  IGNORE="--ignore=$CS_IGNORE"
else
  IGNORE=""
fi

if [ "$CS_ENCODING" != "" ]; then
  ENCODING="--encoding=$CS_ENCODING"
else
  ENCODING=""
fi

if [ "$CS_IGNORE_WARNINGS" == "1" ]; then
  IGNORE_WARNINGS="-n"
else
  IGNORE_WARNINGS=""
fi

# Copy contents of staged version of files to temporary staging area
# because we only want the staged version that will be commited and not
# the version in the working directory
STAGED_FILES=""
for FILE in $FILES_TO_CHECK
do
  ID=$(git diff-index --cached HEAD $FILE | cut -d " " -f4)

  # create staged version of file in temporary staging area with the same
  # path as the original file so that the phpcs ignore filters can be applied
  mkdir -p "$TMP_STAGING/$(dirname $FILE)"
  git cat-file blob $ID > "$TMP_STAGING/$FILE"
  STAGED_FILES="$STAGED_FILES $TMP_STAGING/$FILE"
done

OUTPUT=$($CS_BIN -s $IGNORE_WARNINGS  --standard=$CS_CODING_STANDARD $ENCODING $IGNORE $STAGED_FILES)
RETVAL=$?

# delete temporary copy of staging area
rm -rf $TMP_STAGING

if [ $RETVAL -ne 0 ]; then
  echo "$OUTPUT" | less
fi

# make sure we exit with correct error code
exit $RETVAL
